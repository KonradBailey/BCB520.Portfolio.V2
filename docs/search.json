[
  {
    "objectID": "BCB520 Assignment 05.html",
    "href": "BCB520 Assignment 05.html",
    "title": "BCB520 Assignment 05",
    "section": "",
    "text": "Loading necessary libraries:\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\n\n\nLoading the data:\n\nhockey.data &lt;- read.csv(\"~/Desktop/NHLdraftstats.csv\")\n\n\nhead(hockey.data)\n\n\n\nPart 1: Simple Scatterplot\n\nFiltering a subset of the data where draft year is equal to 2022:\n\ndraft2022&lt;-hockey.data%&gt;%\n  filter(draftyear==2022 & postdraft==0)\n\n\n\nSetting round as an ordered factor:\n\nhockey.data$round &lt;- factor(hockey.data$round, \n                        levels = sort(unique(hockey.data$round)), \n                        ordered = TRUE)\n\n\nhead(hockey.data)\n\n\n\nGrouping players from 2022 by round and NHLgames:\n\ndraft2022 &lt;- hockey.data %&gt;%\n  filter(draftyear == 2022 & postdraft == 0) %&gt;%\n  group_by(round, NHLgames) %&gt;%\n  summarise(Count = n(), .groups = 'drop') # Count the number of players for each (round, NHLgames) pair\n\n\n\nGenerating Simple Scatterplot\n\nggplot(draft2022, aes(x = round, y = NHLgames, size = Count)) +\n  geom_point(col = \"#95C8D8\", alpha = 0.7) +\n  scale_size_continuous(range = c(3, 10)) +\n  scale_y_continuous(limits = c(0, max(draft2022$NHLgames) * 1.1)) +\n  theme_minimal() +\n  labs(title = \"Number of NHL Games Played as a Function of 2022 Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games Played\",\n       size = \"Number of Players\",\n       caption = \"Figure 1. Relationship between which round players were drafted\\nand the number of games they played in. Key: Draft Round.\\nValue: NHL Games Played. Marks: dots. Channels: position and size of dots.\") +\n  theme(legend.position = \"bottom\",\n        plot.caption = element_text(hjust = 0))\n\n\n\n\nPart 2: Expanded Scatterplot\n\nFiltering a subset of the data where draft year is equal to 2018:\n\ndraft.tot.2018&lt;-hockey.data%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\n\nhead(draft.tot.2018)\n\n\n\nGrouping players by playerId, round, overall, position:\n\ndraft.tot.2018&lt;- draft2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n\nRegrouping data by round and totgames:\n\ndraft.tot.2018 &lt;- draft.tot.2018 %&gt;%\n  group_by(round, totgames) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\n\nGenerating Expanded Scatterplot:\n\nggplot(draft.tot.2018, aes(x = round, y = totgames, size = count)) +\n  geom_jitter(alpha = 0.6, color = \"#5B92E5\", width = 0.2, height = 0) +  # Add jitter to the dots\n  scale_size_area(name = \"Number of Players\", max_size = 15, breaks = c(1, 5, 10, 20), labels = c(\"1\", \"5\", \"10\", \"20\")) +\n  theme_minimal() +\n  labs(title = \"Number of NHL Games Played as a Function of Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games Played\")\n\n\n\n\nPart 3: SCATTERPLOT WITH OVERALL DRAFT POSITION\n\nFiltering a subset of the data where draft year is equal to 2018:\n\noverall.2018&lt;-hockey.data%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\n\n\nGrouping players by playerId, round, overall, position:\n\noverall.2018&lt;- draft2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n\nGenerating scatter plot with overall draft position:\n\nggplot(overall.2018, aes(x = overall, y = totgames)) +\n  geom_point(color = \"#191970\", alpha = 0.6, size = 2) +\n  labs(\n    title = \"2018 Draft Picks: Total NHL Games Played by Overall Draft Position\",\n    x = \"Overall Draft Position\",\n    y = \"Total NHL Games Played\",\n    caption = \"Figure 1. Relationship between overall draft position and the total number of games they played in.\\nKey: Overall Position. Value: Total NHL Games Played. Marks: dots. Channels: position of dots.\"\n  ) +\n  theme_minimal()\n\nIt would be difficult to evaluate a player with an overall draft position of 31, given the high degree variance in total NHL games played by players who were picked within a range of overall draft positions from 25-35. This task is made especially difficult by the fact that so many players stack up at zero, with respect to total NHL games played.\n\n\n\nPart 4: HIGHLIGHTING THE VALUE OF ELLIAS LINDHOLM\n\nfiltered_data &lt;- hockey.data %&gt;%\n  filter(overall == 31 & NHLgames &gt; 0)\n\n\nfrequency_distribution &lt;- filtered_data %&gt;%\n  count(points)\n\n\nggplot(frequency_distribution, aes(x = as.factor(points), y = n)) +\n  geom_col(fill = \"#191970\", alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Distribution Of Points Accumulated By Players From The 31st Overall Draft Position\",\n       x = \"Points\",\n       y = \"Frequency\",\n       caption = \"Frequency distribution of players with an overall draft position of 31. \\nPlayers who never played a single NHL game were removed from \\nthe data pool.\") +\n  theme(plot.caption = element_text(hjust = 0)) # Adjusts caption alignment to the left\n\n\n\nConclusion:\nElais Lindholm’s point stats far exceed even the highest scoring players from our data pool of overall 31st position draft picks. This appear to have been a great move by the Vancouver Canucks. As for the Calgary Flames, they were set to renew Lindholm’s contract, which would have been expensive. Given that Lindholm has been in the NHL for a little over ten years and may be reaching the twilight of his career, and the fact that Calgary Flames they weren’t in the running for the championship this year, they presumably made a reasonable decision by being willing to part with a star player to focus on utilizing their resources to build up a better team in the future."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BCB520.Portfolio.V2",
    "section": "",
    "text": "Konrad Bailey\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nBCB520: Assignment 03\n\n\nPost With Code\n\n\nAnalyzing the effect of soil parent material on the height/diameter ratio of Douglas fir trees after controlling for mean annual radiation.\n\n\n\n\n\n\nKonrad Bailey\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\nThis is my first Quarto blog, designed to help me learn the ropes of GitHub.\n\n\n\n\n\n\nKonrad Bailey\n\n\n\n\n\n\n  \n\n\n\n\nBCB520: Assignment 04\n\n\nMarks and Channels\n\n\nExperimenting with marks and channels to demonstrate good and bad practices in data-visualizaton.\n\n\n\n\n\n\nKonrad Bailey\n\n\n\n\n\n\n  \n\n\n\n\nThis is a test.\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nASSIGNMENT 05\n\n\nVisualizations for Tabular Data\n\n\n\n\nAssignment\n\n\nDataViz\n\n\nTables\n\n\nScatterplot\n\n\nBarplot\n\n\nPiechart\n\n\n\n\nShould I trade these draft picks for this bag of magic beans…?\n\n\n\n\n\n\nFeb 25, 2024\n\n\nKonrad Bailey\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "BCB520 A5 Redo.html",
    "href": "BCB520 A5 Redo.html",
    "title": "BCB520 A5 Redo",
    "section": "",
    "text": "Loading necessary libraries:\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\n\n\nLoading the data:\n\nhockey.data &lt;- read.csv(\"~/Desktop/NHLdraftstats.csv\")\n\n\nhead(hockey.data)\n\n\n\nPart 1: Simple Scatterplot\n\nFiltering a subset of the data where draft year is equal to 2022:\n\ndraft2022&lt;-hockey.data%&gt;%\n  filter(draftyear==2022 & postdraft==0)\n\n\n\nSetting round as an ordered factor:\n\nhockey.data$round &lt;- factor(hockey.data$round, \n                        levels = sort(unique(hockey.data$round)), \n                        ordered = TRUE)\n\n\nhead(hockey.data)\n\n\n\nGrouping players from 2022 by round and NHLgames:\n\ndraft2022 &lt;- hockey.data %&gt;%\n  filter(draftyear == 2022 & postdraft == 0) %&gt;%\n  group_by(round, NHLgames) %&gt;%\n  summarise(Count = n(), .groups = 'drop') # Count the number of players for each (round, NHLgames) pair\n\n\n\nGenerating Simple Scatterplot\n\nggplot(draft2022, aes(x = round, y = NHLgames, size = Count)) +\n  geom_point(col = \"#95C8D8\", alpha = 0.7) +\n  scale_size_continuous(range = c(3, 10)) +\n  scale_y_continuous(limits = c(0, max(draft2022$NHLgames) * 1.1)) +\n  theme_minimal() +\n  labs(title = \"Number of NHL Games Played as a Function of 2022 Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games Played\",\n       size = \"Number of Players\",\n       caption = \"Figure 1. Relationship between which round players were drafted\\nand the number of games they played in. Key: Draft Round.\\nValue: NHL Games Played. Marks: dots. Channels: position and size of dots.\") +\n  theme(legend.position = \"bottom\",\n        plot.caption = element_text(hjust = 0))\n\n\n\n\nPart 2: Expanded Scatterplot\n\nFiltering a subset of the data where draft year is equal to 2018:\n\ndraft.tot.2018&lt;-hockey.data%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\n\nhead(draft.tot.2018)\n\n\n\nGrouping players by playerId, round, overall, position:\n\ndraft.tot.2018&lt;- draft2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n\nRegrouping data by round and totgames:\n\ndraft.tot.2018 &lt;- draft.tot.2018 %&gt;%\n  group_by(round, totgames) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\n\n\nGenerating Expanded Scatterplot:\n\nggplot(draft.tot.2018, aes(x = round, y = totgames, size = count)) +\n  geom_jitter(alpha = 0.6, color = \"#5B92E5\", width = 0.2, height = 0) +  # Add jitter to the dots\n  scale_size_area(name = \"Number of Players\", max_size = 15, breaks = c(1, 5, 10, 20), labels = c(\"1\", \"5\", \"10\", \"20\")) +\n  theme_minimal() +\n  labs(title = \"Number of NHL Games Played as a Function of Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games Played\")\n\n\n\n\nPart 3: SCATTERPLOT WITH OVERALL DRAFT POSITION\n\nFiltering a subset of the data where draft year is equal to 2018:\n\noverall.2018&lt;-hockey.data%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\n\n\nGrouping players by playerId, round, overall, position:\n\noverall.2018&lt;- draft2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n\nGenerating scatter plot with overall draft position:\n\nggplot(overall.2018, aes(x = overall, y = totgames)) +\n  geom_point(color = \"#191970\", alpha = 0.6, size = 2) +\n  labs(\n    title = \"2018 Draft Picks: Total NHL Games Played by Overall Draft Position\",\n    x = \"Overall Draft Position\",\n    y = \"Total NHL Games Played\",\n    caption = \"Figure 1. Relationship between overall draft position and the total number of games they played in.\\nKey: Overall Position. Value: Total NHL Games Played. Marks: dots. Channels: position of dots.\"\n  ) +\n  theme_minimal()\n\nIt would be difficult to evaluate a player with an overall draft position of 31, given the high degree variance in total NHL games played by players who were picked within a range of overall draft positions from 25-35. This task is made especially difficult by the fact that so many players stack up at zero, with respect to total NHL games played.\n\n\n\nPart 4: HIGHLIGHTING THE VALUE OF ELLIAS LINDHOLM\n\nfiltered_data &lt;- hockey.data %&gt;%\n  filter(overall == 31 & NHLgames &gt; 0)\n\n\nfrequency_distribution &lt;- filtered_data %&gt;%\n  count(points)\n\n\nggplot(frequency_distribution, aes(x = as.factor(points), y = n)) +\n  geom_col(fill = \"#191970\", alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Distribution Of Points Accumulated By Players From The 31st Overall Draft Position\",\n       x = \"Points\",\n       y = \"Frequency\",\n       caption = \"Frequency distribution of players with an overall draft position of 31. \\nPlayers who never played a single NHL game were removed from \\nthe data pool.\") +\n  theme(plot.caption = element_text(hjust = 0)) # Adjusts caption alignment to the left\n\n\n\nConclusion:\nElais Lindholm’s point stats far exceed even the highest scoring players from our data pool of overall 31st position draft picks. This appear to have been a great move by the Vancouver Canucks. As for the Calgary Flames, they were set to renew Lindholm’s contract, which would have been expensive. Given that Lindholm has been in the NHL for a little over ten years and may be reaching the twilight of his career, and the fact that Calgary Flames they weren’t in the running for the championship this year, they presumably made a reasonable decision by being willing to part with a star player to focus on utilizing their resources to build up a better team in the future."
  },
  {
    "objectID": "posts/Midterm/Midterm_Test.html",
    "href": "posts/Midterm/Midterm_Test.html",
    "title": "This is a test.",
    "section": "",
    "text": "Markdown works"
  },
  {
    "objectID": "posts/welcome/welcome.html",
    "href": "posts/welcome/welcome.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Konrad Bailey is a graduate student at the University of Idaho studying statistics and geographic information systems.\n\nEducation:\nBS Psychology with departmental honors | University of Oregon | 2017 - 2020"
  },
  {
    "objectID": "Mid-Term Draft 03.html",
    "href": "Mid-Term Draft 03.html",
    "title": "Mid-Term Draft 03",
    "section": "",
    "text": "library(readxl)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(ggalt)\nlibrary(tibble)\nlibrary(gridExtra)\nlibrary(stringr)\nlibrary(grid)\nlibrary(scales)"
  },
  {
    "objectID": "Mid-Term Draft 03.html#department-of-energy-data",
    "href": "Mid-Term Draft 03.html#department-of-energy-data",
    "title": "Mid-Term Draft 03",
    "section": "Department of Energy Data",
    "text": "Department of Energy Data\n\nDOEawards.data &lt;- read.csv(\"~/Desktop/DOEawards.csv\")\n\n\nFiltering city by Moscow in DOE data\n\nDOE_UI.data &lt;- DOEawards.data %&gt;%\n  filter(City == 'Moscow')\n\n\nhead(DOE_UI.data)"
  },
  {
    "objectID": "Mid-Term Draft 03.html#national-science-foundation-data",
    "href": "Mid-Term Draft 03.html#national-science-foundation-data",
    "title": "Mid-Term Draft 03",
    "section": "National Science Foundation Data",
    "text": "National Science Foundation Data\n\nlibrary(readxl)\n\n\n# Base URL for the API\nbase_url &lt;- \"https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22\"\n\nprintFields &lt;- \"rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail\"\n\n# Initialize an empty data frame to store results\nNSFtoUI &lt;- tibble()\n\n# Number of results per page (as per API settings)\nresults_per_page &lt;- 25\n\n# Variable to keep track of the current page number\ncurrent_page &lt;- 1\n\n# Variable to control the loop\nkeep_going &lt;- TRUE\n\nwhile(keep_going) {\n    # Calculate the offset for the current page\n    offset &lt;- (current_page - 1) * results_per_page + 1\n\n    # Construct the full URL with offset\n    url &lt;- paste0(base_url, \"&offset=\", offset, \"&printFields=\", printFields)\n\n    # Make the API call\n    response &lt;- GET(url)\n\n    # Check if the call was successful\n    if (status_code(response) == 200) {\n        # Extract and parse the JSON data\n        json_data &lt;- content(response, type = \"text\", encoding = \"UTF-8\")\n        parsed_data &lt;- fromJSON(json_data, flatten = TRUE)\n\n        # Extract the 'award' data and add to the all_awards data frame\n        awards_data &lt;- parsed_data$response$award\n        NSFtoUI &lt;- bind_rows(NSFtoUI, as_tibble(awards_data))\n\n        # Debug: Print the current page number and number of awards fetched\n        print(paste(\"Page:\", current_page, \"- Awards fetched:\", length(awards_data$id)))\n\n        # Check if the current page has less than results_per_page awards, then it's the last page\n        if (length(awards_data$id) &lt; results_per_page) {\n            keep_going &lt;- FALSE\n        } else {\n            current_page &lt;- current_page + 1\n        }\n    } else {\n        print(paste(\"Failed to fetch data: Status code\", status_code(response)))\n        keep_going &lt;- FALSE\n    }\n}\n\n\nhead(NSFtoUI)"
  },
  {
    "objectID": "Mid-Term Draft 03.html#national-institute-of-health-data",
    "href": "Mid-Term Draft 03.html#national-institute-of-health-data",
    "title": "Mid-Term Draft 03",
    "section": "National Institute of Health Data",
    "text": "National Institute of Health Data\n\nlibrary(readxl)\n\n\n# Base URL for the API\nbase_url &lt;- \"https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22\"\n\nprintFields &lt;- \"rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail\"\n\n# Initialize an empty data frame to store results\nNSFtoUI &lt;- tibble()\n\n# Number of results per page (as per API settings)\nresults_per_page &lt;- 25\n\n# Variable to keep track of the current page number\ncurrent_page &lt;- 1\n\n# Variable to control the loop\nkeep_going &lt;- TRUE\n\nwhile(keep_going) {\n    # Calculate the offset for the current page\n    offset &lt;- (current_page - 1) * results_per_page + 1\n\n    # Construct the full URL with offset\n    url &lt;- paste0(base_url, \"&offset=\", offset, \"&printFields=\", printFields)\n\n    # Make the API call\n    response &lt;- GET(url)\n\n    # Check if the call was successful\n    if (status_code(response) == 200) {\n        # Extract and parse the JSON data\n        json_data &lt;- content(response, type = \"text\", encoding = \"UTF-8\")\n        parsed_data &lt;- fromJSON(json_data, flatten = TRUE)\n\n        # Extract the 'award' data and add to the all_awards data frame\n        awards_data &lt;- parsed_data$response$award\n        NSFtoUI &lt;- bind_rows(NSFtoUI, as_tibble(awards_data))\n\n        # Debug: Print the current page number and number of awards fetched\n        print(paste(\"Page:\", current_page, \"- Awards fetched:\", length(awards_data$id)))\n\n        # Check if the current page has less than results_per_page awards, then it's the last page\n        if (length(awards_data$id) &lt; results_per_page) {\n            keep_going &lt;- FALSE\n        } else {\n            current_page &lt;- current_page + 1\n        }\n    } else {\n        print(paste(\"Failed to fetch data: Status code\", status_code(response)))\n        keep_going &lt;- FALSE\n    }\n}\n\n\nprint(projects_df)"
  },
  {
    "objectID": "Mid-Term Draft 03.html#generating-ui_grant_data",
    "href": "Mid-Term Draft 03.html#generating-ui_grant_data",
    "title": "Mid-Term Draft 03",
    "section": "Generating UI_Grant_Data",
    "text": "Generating UI_Grant_Data\n\n# Prepare DOE_UI.data with Funding_Agency\nDOE_UI_prepared &lt;- DOE_UI.data %&gt;%\n  select(\n    PI_Name = PI, \n    Award_Amount = Amount.Awarded.to.Date, \n    Start_Date = Start.Date, \n    End_Date = End.Date\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = mdy(Start_Date),\n    End_Date = mdy(End_Date),\n    Funding_Agency = \"DOE\"\n  )\n\n# Prepare NSFtoUI with Funding_Agency\nNSFtoUI_prepared &lt;- NSFtoUI %&gt;%\n  select(\n    PI_Name = pdPIName, \n    Award_Amount = estimatedTotalAmt, \n    Start_Date = startDate, \n    End_Date = expDate\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = mdy(Start_Date),\n    End_Date = mdy(End_Date),\n    Funding_Agency = \"NSF\"\n  )\n\n# Prepare projects_df with corrected date handling for ISO 8601 format and Funding_Agency\nprojects_df_prepared &lt;- projects_df %&gt;%\n  select(\n    PI_Name = contact_pi_name, \n    Award_Amount = award_amount, \n    Start_Date = project_start_date, \n    End_Date = project_end_date\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = as.Date(ymd_hms(Start_Date)),\n    End_Date = as.Date(ymd_hms(End_Date)),\n    Funding_Agency = \"NIH\"\n  )\n\n# Combine the prepared datasets into UI_Grant_Data\nUI_Grant_Data &lt;- bind_rows(DOE_UI_prepared, NSFtoUI_prepared, projects_df_prepared)\n\n\nprint(UI_Grant_Data)\n\n\n# Prepare DOE_UI.data with Funding_Agency\nDOE_UI_prepared &lt;- DOE_UI.data %&gt;%\n  select(\n    PI_Name = PI, \n    Award_Amount = Amount.Awarded.to.Date, \n    Start_Date = Start.Date, \n    End_Date = End.Date\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = mdy(Start_Date),\n    End_Date = mdy(End_Date),\n    Funding_Agency = \"DOE\"\n  )\n\n# Prepare NSFtoUI with Funding_Agency\nNSFtoUI_prepared &lt;- NSFtoUI %&gt;%\n  select(\n    PI_Name = pdPIName, \n    Award_Amount = estimatedTotalAmt, \n    Start_Date = startDate, \n    End_Date = expDate\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = mdy(Start_Date),\n    End_Date = mdy(End_Date),\n    Funding_Agency = \"NSF\"\n  )\n\n# Prepare projects_df with corrected date handling for ISO 8601 format and Funding_Agency\nprojects_df_prepared &lt;- projects_df %&gt;%\n  select(\n    PI_Name = contact_pi_name, \n    Award_Amount = award_amount, \n    Start_Date = project_start_date, \n    End_Date = project_end_date\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = as.Date(ymd_hms(Start_Date)),\n    End_Date = as.Date(ymd_hms(End_Date)),\n    Funding_Agency = \"NIH\"\n  )\n\n# Combine the prepared datasets into UI_Grant_Data\nUI_Grant_Data &lt;- bind_rows(DOE_UI_prepared, NSFtoUI_prepared, projects_df_prepared) %&gt;%\n  # Filter out rows where Start_Date is before 01/01/2014\n  filter(Start_Date &gt;= as.Date('2014-01-01'))\n\n\nprint(UI_Grant_Data)\n\n\n# Filter the dataset for rows where Funding_Agency is \"DOE\"\nDOE_data &lt;- UI_Grant_Data %&gt;% \n  filter(Funding_Agency == \"DOE\")\n\n# Generate the dumbbell plot with updated font sizes\nggplot(DOE_data, aes(y = reorder(PI_Name, Start_Date), x = Start_Date, xend = End_Date)) +\n  geom_dumbbell(size=1, colour=\"#82cbb2\", colour_x=\"#191970\", colour_xend=\"#191970\", dot_size=4) +\n  labs(title = \"Timeline of Department of Energy Grants\", # Title\n       x = \"Date\", # X-axis label\n       y = \"Principal Investigator\") + # Y-axis label\n  theme_minimal() +\n  theme(panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.text.x = element_text(angle=45, hjust=1, size=8), # X-axis text size\n        axis.text.y = element_text(size=8), # Y-axis text size\n        axis.title.x = element_text(size=9.8), # X-axis label size\n        axis.title.y = element_text(size=9.8), # Y-axis label size\n        plot.title = element_text(face = \"bold\", size=12.5)) # Title font size and style\n\n\n# Create the dumbbell plot for the first half with adjusted axis title sizes\nplot1 &lt;- ggplot(NSF_data_part1, aes(y = reorder(PI_Name, Start_Date), x = Start_Date, xend = End_Date)) +\n  geom_dumbbell(size=0.5, colour=\"#82cbb2\", colour_x=\"#191970\", colour_xend=\"#191970\") +\n  labs(x = \"Date\", y = \"Principal Investigator\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle=45, hjust=1, size=7),\n        axis.text.y = element_text(size=4.4),\n        axis.title.x = element_text(size=8.5), # Make x-axis title smaller and match y-axis title size\n        axis.title.y = element_text(size=8.5), # Adjust y-axis title size to be consistent\n        panel.grid = element_blank())\n\n# Create the dumbbell plot for the second half with adjusted axis title sizes\nplot2 &lt;- ggplot(NSF_data_part2, aes(y = reorder(PI_Name, Start_Date), x = Start_Date, xend = End_Date)) +\n  geom_dumbbell(size=0.5, colour=\"#82cbb2\", colour_x=\"#191970\", colour_xend=\"#191970\") +\n  labs(x = \"Date\", y = \"\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle=45, hjust=1, size=7),\n        axis.text.y = element_text(size=4.4),\n        axis.title.x = element_text(size=8.5), # Ensure x-axis title size is consistent across both plots\n        panel.grid = element_blank())\n\n# Arrange the plots side by side with a single title for the entire figure\ngrid.arrange(plot1, plot2, ncol = 2, top = grid::textGrob(\"Timeline of National Science Foundation Grants\", gp = grid::gpar(fontface = \"bold\", fontsize = 12.5)))\n\n\n# Filter the dataset for rows where Funding_Agency is \"NIH\"\nNIH_data &lt;- UI_Grant_Data %&gt;% \n  filter(Funding_Agency == \"NIH\")\n\n# Calculate the number of rows and find the midpoint\nn_rows &lt;- nrow(NIH_data)\nmidpoint &lt;- floor(n_rows / 2)\n\n# Correctly split NIH data into two parts for plotting\nNIH_data_part1 &lt;- NIH_data %&gt;% slice(1:midpoint)\nNIH_data_part2 &lt;- NIH_data %&gt;% slice((midpoint + 1):n_rows)\n\n# Create the dumbbell plot for the first half with NIH data\nplot1 &lt;- ggplot(NIH_data_part1, aes(y = reorder(PI_Name, Start_Date), x = Start_Date, xend = End_Date)) +\n  geom_dumbbell(size=0.5, colour=\"#82cbb2\", colour_x=\"#191970\", colour_xend=\"#191970\") +\n  labs(x = \"Date\", y = \"Principal Investigator\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle=45, hjust=1, size=7),\n        axis.text.y = element_text(size=4.4),\n        axis.title.x = element_text(size=8.5),\n        axis.title.y = element_text(size=8.5),\n        panel.grid = element_blank())\n\n# Create the dumbbell plot for the second half with NIH data\nplot2 &lt;- ggplot(NIH_data_part2, aes(y = reorder(PI_Name, Start_Date), x = Start_Date, xend = End_Date)) +\n  geom_dumbbell(size=0.5, colour=\"#82cbb2\", colour_x=\"#191970\", colour_xend=\"#191970\") +\n  labs(x = \"Date\", y = \"\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle=45, hjust=1, size=7),\n        axis.text.y = element_text(size=4.4),\n        axis.title.x = element_text(size=8.5),\n        panel.grid = element_blank())\n\n# Arrange the plots side by side with a single title for the entire figure\ngrid.arrange(plot1, plot2, ncol = 2, top = grid::textGrob(\"Timeline of National Institute of Health Grants\", gp = grid::gpar(fontface = \"bold\", fontsize = 12.5)))\n\n\n# Summarize the total Award_Amount for each Funding_Agency\nagency_totals &lt;- UI_Grant_Data %&gt;%\n  group_by(Funding_Agency) %&gt;%\n  summarise(Total_Award_Amount = sum(Award_Amount, na.rm = TRUE)) %&gt;%\n  arrange(desc(Total_Award_Amount)) # Optional: arrange by total amount for a more informative plot\n\n# Create a bar chart with dollar-formatted y-axis labels and custom colors\nggplot(agency_totals, aes(x = Funding_Agency, y = Total_Award_Amount, fill = Funding_Agency)) +\n  geom_bar(stat = \"identity\", show.legend = FALSE) + # Use stat=\"identity\" to use the values in the data frame\n  theme_minimal() +\n  labs(x = \"Funding Agency\", y = \"Total Award Amount ($)\", title = \"Total Award Amount by Funding Agency\") +\n  scale_y_continuous(labels = label_dollar()) + # Format y-axis labels as dollars\n  scale_fill_manual(values = c(\"#7982A9\", \"#B0C4DE\", \"#507072\")) + # Custom colors for each funding agency\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate x-axis labels for better readability\n\n\n# Calculate the overall total Award_Amount\noverall_total &lt;- sum(UI_Grant_Data$Award_Amount, na.rm = TRUE)\n\n# Summarize the percentage of Award_Amount for each Funding_Agency\nagency_percentages &lt;- UI_Grant_Data %&gt;%\n  group_by(Funding_Agency) %&gt;%\n  summarise(Total_Award_Amount = sum(Award_Amount, na.rm = TRUE),\n            Percentage = Total_Award_Amount / overall_total * 100) %&gt;%\n  arrange(desc(Percentage)) # Optional: arrange by percentage for a more informative plot\n\n# Create a pie chart to display the percentage contribution of each Funding_Agency\nggplot(agency_percentages, aes(x = \"\", y = Percentage, fill = Funding_Agency)) +\n  geom_bar(width = 1, stat = \"identity\", show.legend = TRUE) + # Use geom_bar and set width to create a pie chart\n  coord_polar(theta = \"y\") + # Use polar coordinates to transform the bar chart into a pie chart\n  theme_void() + # Use theme_void to minimize chart junk\n  labs(title = \"Percentage of Total Award Amount by Funding Agency\", y = \"Percentage\") +\n  scale_fill_manual(values = c(\"#7982A9\", \"#B0C4DE\", \"#507072\")) # Custom colors for each funding agency\n\n\n'#82cbb2'  \"#B0C4DE\" '#191970' '#527D92' '#507072' '#6B9C9D' '#5F7A8B' \"#7982A9\"\n\n\n\"#7982A9\" '#82cbb2' '#5F7A8B' '#4F5B66' '#575D90'\n\n\n# Filter the dataset for rows where Funding_Agency is \"NIH\"\nNIH_data &lt;- UI_Grant_Data %&gt;% \n  filter(Funding_Agency == \"NIH\")\n\n# Create a scatter plot with Award_Amount on the x-axis and PI_Name on the y-axis\nscatter_plot &lt;- ggplot(NIH_data, aes(x = Award_Amount, y = reorder(PI_Name, Award_Amount))) +\n  geom_point() +\n  labs(x = \"Award Amount ($)\", y = \"Principal Investigator\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    axis.ticks.x = element_line(),\n    axis.text.y = element_text(size = 7),\n    panel.grid.major.y = element_blank(),\n    plot.margin = margin(t = 30, r = 30, b = 50, l = 50)\n  ) +\n  scale_x_continuous(position = \"top\") # Move the x-axis to the top\n\n# Print the plot\nprint(scatter_plot)\n\n\n# Calculate the number of rows and find segment points\nn_rows &lt;- nrow(NIH_data)\nthirdpoint &lt;- floor(n_rows / 3)\ntwo_thirdpoint &lt;- floor(2 * n_rows / 3)\n\n# Correctly split NIH data into three parts for plotting\nNIH_data_part1 &lt;- NIH_data %&gt;% slice(1:thirdpoint)\nNIH_data_part2 &lt;- NIH_data %&gt;% slice((thirdpoint + 1):two_thirdpoint)\nNIH_data_part3 &lt;- NIH_data %&gt;% slice((two_thirdpoint + 1):n_rows)\n\n# Create scatter plot for the first part of the data\nscatter_plot1 &lt;- ggplot(NIH_data_part1, aes(x = Award_Amount, y = reorder(PI_Name, Award_Amount))) +\n  geom_point() +\n  labs(x = \"Award Amount ($)\", y = \"Principal Investigator\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1),\n    axis.text.y = element_text(size = 7),\n    panel.grid.major.y = element_blank()\n  )\n\n# Create scatter plot for the second part of the data\nscatter_plot2 &lt;- ggplot(NIH_data_part2, aes(x = Award_Amount, y = reorder(PI_Name, Award_Amount))) +\n  geom_point() +\n  labs(x = \"Award Amount ($)\", y = \"\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1),\n    axis.text.y = element_blank(),\n    panel.grid.major.y = element_blank()\n  )\n\n# Create scatter plot for the third part of the data\nscatter_plot3 &lt;- ggplot(NIH_data_part3, aes(x = Award_Amount, y = reorder(PI_Name, Award_Amount))) +\n  geom_point() +\n  labs(x = \"Award Amount ($)\", y = \"\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1),\n    axis.text.y = element_blank(),\n    panel.grid.major.y = element_blank()\n  )\n\n# Arrange the three plots side by side with a single title for the entire figure\ngrid.arrange(scatter_plot1, scatter_plot2, scatter_plot3, ncol = 3, top = \"Timeline of National Institute of Health Grants\")"
  },
  {
    "objectID": "Mid-Term Draft 03.html#note",
    "href": "Mid-Term Draft 03.html#note",
    "title": "Mid-Term Draft 03",
    "section": "Note:",
    "text": "Note:\nSome PI’s received multiple grants, so in certain instances there’s overlapping data on single rows. I need a solution to this problem (perhaps multiple rows for PI’s received multiple grants).\n\nhead(UI_Grant_Data)"
  },
  {
    "objectID": "Mid-Term Draft 02.html",
    "href": "Mid-Term Draft 02.html",
    "title": "Mid-Term Draft 02",
    "section": "",
    "text": "Load required libraries\n\nlibrary(readxl)\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(tidyr)\n\n\nUSDA_UI.data &lt;- read.csv(\"~/Desktop/USDAtoUI.csv\")\n\n\nhead(USDA_UI.data)\n\n\nDOEawards.data &lt;- read.csv(\"~/Desktop/DOEawards.csv\")\n\n\n\nFilter city by Moscow in DOE data\n\nDOE_UI.data &lt;- DOEawards.data %&gt;%\n  filter(City == 'Moscow')\n\n\nhead(DOE_UI.data)\n\n\n\nFetch NSF data with API\n\nlibrary(readxl)\n\n\n# Base URL for the API\nbase_url &lt;- \"https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22\"\n\nprintFields &lt;- \"rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail\"\n\n# Initialize an empty data frame to store results\nNSFtoUI &lt;- tibble()\n\n# Number of results per page (as per API settings)\nresults_per_page &lt;- 25\n\n# Variable to keep track of the current page number\ncurrent_page &lt;- 1\n\n# Variable to control the loop\nkeep_going &lt;- TRUE\n\nwhile(keep_going) {\n    # Calculate the offset for the current page\n    offset &lt;- (current_page - 1) * results_per_page + 1\n\n    # Construct the full URL with offset\n    url &lt;- paste0(base_url, \"&offset=\", offset, \"&printFields=\", printFields)\n\n    # Make the API call\n    response &lt;- GET(url)\n\n    # Check if the call was successful\n    if (status_code(response) == 200) {\n        # Extract and parse the JSON data\n        json_data &lt;- content(response, type = \"text\", encoding = \"UTF-8\")\n        parsed_data &lt;- fromJSON(json_data, flatten = TRUE)\n\n        # Extract the 'award' data and add to the all_awards data frame\n        awards_data &lt;- parsed_data$response$award\n        NSFtoUI &lt;- bind_rows(NSFtoUI, as_tibble(awards_data))\n\n        # Debug: Print the current page number and number of awards fetched\n        print(paste(\"Page:\", current_page, \"- Awards fetched:\", length(awards_data$id)))\n\n        # Check if the current page has less than results_per_page awards, then it's the last page\n        if (length(awards_data$id) &lt; results_per_page) {\n            keep_going &lt;- FALSE\n        } else {\n            current_page &lt;- current_page + 1\n        }\n    } else {\n        print(paste(\"Failed to fetch data: Status code\", status_code(response)))\n        keep_going &lt;- FALSE\n    }\n}\n\n\nhead(projects_df)\n\n\n\nCreating My New Dataset:\n\n# Prepare DOE_UI.data\nDOE_UI_prepared &lt;- DOE_UI.data %&gt;%\n  select(PI_Name = PI, \n         Award_Amount = Amount.Awarded.to.Date, \n         Start_Date = Start.Date, \n         End_Date = End.Date) %&gt;%\n  mutate(Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n         Start_Date = as.Date(Start_Date, format = \"%Y-%m-%d\"),\n         End_Date = as.Date(End_Date, format = \"%Y-%m-%d\"))\n\n# Prepare NSFtoUI\nNSFtoUI_prepared &lt;- NSFtoUI %&gt;%\n  select(PI_Name = pdPIName, \n         Award_Amount = estimatedTotalAmt, \n         Start_Date = startDate, \n         End_Date = expDate) %&gt;%\n  mutate(Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n         Start_Date = as.Date(Start_Date, format = \"%Y-%m-%d\"),\n         End_Date = as.Date(End_Date, format = \"%Y-%m-%d\"))\n\n# Prepare projects_df\nprojects_df_prepared &lt;- projects_df %&gt;%\n  select(PI_Name = contact_pi_name, \n         Award_Amount = award_amount, \n         Start_Date = project_start_date, \n         End_Date = project_end_date) %&gt;%\n  mutate(Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n         Start_Date = as.Date(Start_Date, format = \"%Y-%m-%d\"),\n         End_Date = as.Date(End_Date, format = \"%Y-%m-%d\"))\n\n# Combine the prepared datasets\nUI_Grant_Data &lt;- bind_rows(DOE_UI_prepared, NSFtoUI_prepared, projects_df_prepared)\n\n\nhead(UI_Grant_Data)\n\n\n\nTest:\n\n\nPrepare DOE_UI.data with Funding_Agency\nDOE_UI_prepared &lt;- DOE_UI.data %&gt;% select(PI_Name = PI, Award_Amount = Amount.Awarded.to.Date, Start_Date = Start.Date, End_Date = End.Date) %&gt;% mutate(Award_Amount = as.numeric(gsub(“[^0-9.-]”, ““, Award_Amount)), Start_Date = as.Date(Start_Date, format =”%Y-%m-%d”), End_Date = as.Date(End_Date, format = “%Y-%m-%d”), Funding_Agency = “DOE”)\n\n\nPrepare NSFtoUI with Funding_Agency\nNSFtoUI_prepared &lt;- NSFtoUI %&gt;% select(PI_Name = pdPIName, Award_Amount = estimatedTotalAmt, Start_Date = startDate, End_Date = expDate) %&gt;% mutate(Award_Amount = as.numeric(gsub(“[^0-9.-]”, ““, Award_Amount)), Start_Date = as.Date(Start_Date, format =”%Y-%m-%d”), End_Date = as.Date(End_Date, format = “%Y-%m-%d”), Funding_Agency = “NSF”)\n\n\nPrepare projects_df with Funding_Agency\nprojects_df_prepared &lt;- projects_df %&gt;% select(PI_Name = contact_pi_name, Award_Amount = award_amount, Start_Date = project_start_date, End_Date = project_end_date) %&gt;% mutate(Award_Amount = as.numeric(gsub(“[^0-9.-]”, ““, Award_Amount)), Start_Date = as.Date(Start_Date, format =”%Y-%m-%d”), End_Date = as.Date(End_Date, format = “%Y-%m-%d”), Funding_Agency = “NIH”)\n\n\nCombine the prepared datasets\nUI_Grant_Data &lt;- bind_rows(DOE_UI_prepared, NSFtoUI_prepared, projects_df_prepared)\n\n#head(UI_Grant_Data)\n\n\n# Prepare NSFtoUI with corrected date handling and Funding_Agency\nNSFtoUI_prepared &lt;- NSFtoUI %&gt;%\n  select(\n    PI_Name = pdPIName, \n    Award_Amount = estimatedTotalAmt, \n    Start_Date = startDate, \n    End_Date = expDate\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = as.Date(Start_Date, format = \"%m/%d/%Y\"),\n    End_Date = as.Date(End_Date, format = \"%m/%d/%Y\"),\n    Funding_Agency = \"NSF\"\n  )\n\n# Prepare projects_df with corrected date handling and Funding_Agency\nprojects_df_prepared &lt;- projects_df %&gt;%\n  select(\n    PI_Name = contact_pi_name, \n    Award_Amount = award_amount, \n    Start_Date = project_start_date, \n    End_Date = project_end_date\n  ) %&gt;%\n  mutate(\n    Award_Amount = as.numeric(gsub(\"[^0-9.-]\", \"\", Award_Amount)),\n    Start_Date = as.Date(Start_Date, format = \"%m/%d/%Y\"),\n    End_Date = as.Date(End_Date, format = \"%m/%d/%Y\"),\n    Funding_Agency = \"NIH\"\n  )\n\n# Combine the prepared datasets into UI_Grant_Data\nUI_Grant_Data &lt;- bind_rows(DOE_UI_prepared, NSFtoUI_prepared, projects_df_prepared)\n\n\nhead(UI_Grant_Data)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(MASS)\n\n\nAttaching package: 'MASS'\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\n\n\n\nDougFir.data &lt;- read.csv(\"~/Desktop/DougFir.data.csv\", skip=1)\n\n\n\n\n\nhead(DougFir.data)\n\n              SPM  MAR  DBH    HT       HDR\n1 Metasedimentary 12.3 35.5 28.24 0.7954930\n2       Intrusive 13.3 41.9 29.15 0.6957041\n3       Intrusive 13.3 49.4 30.89 0.6253036\n4       Intrusive 13.3 23.7 21.77 0.9185654\n5       Intrusive 13.3 44.9 30.77 0.6853007\n6       Intrusive 13.3 23.0  9.10 0.3956522\n\n\n\n\n\nThese data are presented in the form of a table.\n\n\n\nMy independent variables are soil parent material (categorical) and mean annual radiation (continuous). The variables diameter breast height (continuous) and height (continuous) are used to derive my dependent variable, height diameter ratio (continuous).\n\n\n\nNote: Requires data cleaning.\n\nDougFir.plot &lt;-ggplot(DougFir.data, aes(x= MAR, y=HDR, color=SPM)) + geom_point(size=3) +\n  ggtitle('Effect of Soil Parent Material and Mean Annual Radiation \nOn Douglas Fir Height/Diameter Ratio')\nDougFir.plot + scale_color_brewer(palette=\"Dark2\")\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nI don’t like this plot. It’s difficult to interpret the effect of mean annual radiation and the clustered nature of the data looks a tad weird.\n\n\n\n\nDougFir.box &lt;- ggplot(DougFir.data, aes(x = SPM, y = HDR, fill = SPM)) + \ngeom_boxplot(outlier.shape = NA) + \ntheme(legend.position=\"top\") +\n  ggtitle('Effect of Soil Parent Material and Mean Annual Radiation \nOn Douglas Fir Height/Diameter Ratio')\nDougFir.box + scale_color_brewer(palette=\"Dark2\")\n\nWarning: Removed 1 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "posts/post-with-code/index.html#development-of-statistical-model",
    "href": "posts/post-with-code/index.html#development-of-statistical-model",
    "title": "Post With Code",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(MASS)\n\n\nAttaching package: 'MASS'\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n\n\n\n\nDougFir.data &lt;- read.csv(\"~/Desktop/DougFir.data.csv\", skip=1)\n\n\n\n\n\nhead(DougFir.data)\n\n              SPM  MAR  DBH    HT       HDR\n1 Metasedimentary 12.3 35.5 28.24 0.7954930\n2       Intrusive 13.3 41.9 29.15 0.6957041\n3       Intrusive 13.3 49.4 30.89 0.6253036\n4       Intrusive 13.3 23.7 21.77 0.9185654\n5       Intrusive 13.3 44.9 30.77 0.6853007\n6       Intrusive 13.3 23.0  9.10 0.3956522\n\n\n\n\n\nThese data are presented in the form of a table.\n\n\n\nMy independent variables are soil parent material (categorical) and mean annual radiation (continuous). The variables diameter breast height (continuous) and height (continuous) are used to derive my dependent variable, height diameter ratio (continuous).\n\n\n\nNote: Requires data cleaning.\n\nDougFir.plot &lt;-ggplot(DougFir.data, aes(x= MAR, y=HDR, color=SPM)) + geom_point(size=3) +\n  ggtitle('Effect of Soil Parent Material and Mean Annual Radiation \nOn Douglas Fir Height/Diameter Ratio')\nDougFir.plot + scale_color_brewer(palette=\"Dark2\")\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nI don’t like this plot. It’s difficult to interpret the effect of mean annual radiation and the clustered nature of the data looks a tad weird.\n\n\n\n\nDougFir.box &lt;- ggplot(DougFir.data, aes(x = SPM, y = HDR, fill = SPM)) + \ngeom_boxplot(outlier.shape = NA) + \ntheme(legend.position=\"top\") +\n  ggtitle('Effect of Soil Parent Material and Mean Annual Radiation \nOn Douglas Fir Height/Diameter Ratio')\nDougFir.box + scale_color_brewer(palette=\"Dark2\")\n\nWarning: Removed 1 rows containing non-finite values (`stat_boxplot()`)."
  },
  {
    "objectID": "posts/post-with-code/index.html#task-abstraction",
    "href": "posts/post-with-code/index.html#task-abstraction",
    "title": "Post With Code",
    "section": "Task Abstraction:",
    "text": "Task Abstraction:\n\nAction: Discover\n\n\nTarget: Identify trends and features of the data"
  },
  {
    "objectID": "posts/post-with-code/index.html#future-objectives",
    "href": "posts/post-with-code/index.html#future-objectives",
    "title": "Post With Code",
    "section": "Future Objectives:",
    "text": "Future Objectives:\nI want to create a visualization that demonstrates the difference in HDR based on SPM. However, using the raw to generate a boxplot doesn’t control for my covariate, so at best it merely provides the reader a preliminary gist of what’s going on. The effect of soil parent material after controlling for mean annual radiation can’t be assessed until after performing the ANCOVA. I’m considering creating a boxplot based on the predicted values of my regression model, which control for mean annual radiation, and displaying it side-by-side with the boxplot based on the raw data.\nDevelop a personalized template of aesthetic preferences for ggplot figures."
  },
  {
    "objectID": "posts/post-with-code/index.html#continued-development-of-statistical-model",
    "href": "posts/post-with-code/index.html#continued-development-of-statistical-model",
    "title": "Post With Code",
    "section": "Continued Development of Statistical Model:",
    "text": "Continued Development of Statistical Model:\n\nCreating Linear Regression Model:\nNote: How does the creation of this linear model control for MAR? Because regression inherently controls for the effect of additional variables in the model when assessing the effect of a single variable, right?\n\nDougFir.ANCOVA &lt;- lm(HDR ~ MAR + SPM, data = DougFir.data)\n\n\n\nPerforming ANOVA:\nNote: Should I label this ANCOVA?\n\nanova(DougFir.ANCOVA)\n\nAnalysis of Variance Table\n\nResponse: HDR\n          Df  Sum Sq Mean Sq F value    Pr(&gt;F)    \nMAR        1 0.00809 0.00809  0.3423    0.5602    \nSPM        2 0.67668 0.33834 14.3116 5.075e-06 ***\nResiduals 78 1.84398 0.02364                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nGenerating Residual-by-Predicted Plot:\n\nplot(predict(DougFir.ANCOVA), rstandard(DougFir.ANCOVA),\n     main = 'Douglas Fir Residuals')\nabline(0,0)\n\n\n\n\nThe pattern in the residuals-by-predicted plot demonstrates a slight megaphone pattern, violating the assumption equal variance necessary for regression.\n\n\nGenerating QQ Plot:\n\nDougFir.QQ &lt;- rstandard(DougFir.ANCOVA)\nqqnorm(DougFir.QQ,\n       ylab = 'Height/Diameter Ratio',\n       xlab = 'Normal Scores',\n       main = 'Douglas Fir QQ',)\nqqline(DougFir.QQ)\n\n\n\n\nThe QQ plot shows that my data decently conforms to a normal distribution.\n\n\nPerforming Box-Cox Analysis:\n\nboxcox(HDR ~ MAR + SPM, data = DougFir.data, lambda = seq(-1.25, 1.25, length = 10))\n\n\n\n\n\n\nPerforming Transformation on the Regression Model with Lambda set to 0.1:\n\nDougFir.ANCOVA.02 &lt;- lm(HDR^0.1 ~ MAR + SPM, data = DougFir.data)\n\n\n\nGenerating Residual-by-Predicted Plot After Performing Transformation:\n\nplot(predict(DougFir.ANCOVA.02), rstandard(DougFir.ANCOVA.02),\n     main = 'Douglas Fir Residuals with Lambda = 0.1')\nabline(0,0)\n\n\n\n\nThe pattern in the residuals-by-predicted plot, after performing the transformation with lambda = 0.1, demonstrates a more equal distribution of the residual errors, making this model a better fit.\n\n\nGenerating QQ Plot After Performing Transformation:\n\nDougFir.QQ.02 &lt;- rstandard(DougFir.ANCOVA.02)\nqqnorm(DougFir.QQ.02,\n       ylab = 'Height/Diameter Ratio',\n       xlab = 'Normal Scores',\n       main = 'Douglas Fir QQ with Lambda = 0.1',)\nqqline(DougFir.QQ.02)\n\n\n\n\nThe QQ plot shows that my data conform to a normal distribution.\n\n\nPerforming ANOVA on the Transformed Model:\n\nanova(DougFir.ANCOVA.02)\n\nAnalysis of Variance Table\n\nResponse: HDR^0.1\n          Df   Sum Sq   Mean Sq F value    Pr(&gt;F)    \nMAR        1 0.000122 0.0001223  0.2398    0.6257    \nSPM        2 0.014447 0.0072234 14.1647 5.652e-06 ***\nResiduals 78 0.039777 0.0005100                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nPerforming a Tukey’s Honestly Significant Difference Test:\nNote: The next step is to perform a post-hoc test to determine which soil parent materials demonstrated significant differences in their effect on HDR."
  },
  {
    "objectID": "posts/MarksChannels/index.html",
    "href": "posts/MarksChannels/index.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\n#library(plotly)"
  },
  {
    "objectID": "posts/MarksChannels/index.html#expressiveness-and-effectiveness",
    "href": "posts/MarksChannels/index.html#expressiveness-and-effectiveness",
    "title": "Assignment 4",
    "section": "Expressiveness and Effectiveness",
    "text": "Expressiveness and Effectiveness\n\nFigure 1\n\n\nCode\nset.seed(42) # For reproducibility\n\n# Creating the dataset\ndeadly.critters &lt;- data.frame(\n  critter.type = rep(c(\"mosquitoes\", \"the family dog\", \"hippopotamuses\", \"rattle snakes\"), each = 50),\n  humans.killed = c(\n    rpois(50, lambda = 1000), # Mosquitoes have the highest score, using Poisson distribution for count data\n    rpois(50, lambda = 500),  # The family dog has the second highest score\n    rpois(50, lambda = 20),   # Hippopotamuses have lower scores\n    rpois(50, lambda = 20)    # Rattle snakes have lower scores, similar to hippopotamuses\n  )\n)\n\n# Viewing the first few rows of the dataset\nhead(deadly.critters)\n\n\n  critter.type humans.killed\n1   mosquitoes          1043\n2   mosquitoes           982\n3   mosquitoes          1001\n4   mosquitoes           965\n5   mosquitoes           996\n6   mosquitoes           979\n\n\n\n\nCode\n# Assuming the dataset deadly.critters already exists\n# Summarizing average humans killed by each critter type for the bar heights\navg_kills &lt;- aggregate(humans.killed ~ critter.type, data = deadly.critters, mean)\n\n# Creating the bar chart\nggplot(avg_kills, aes(x = critter.type, y = humans.killed, fill = critter.type)) +\n  geom_bar(stat = \"identity\", position = position_dodge(), width = 0.7) +\n  scale_fill_manual(values = c(\"mosquitoes\" = \"#9C51B6\", \n                               \"the family dog\" = \"#D86060\", \n                               \"hippopotamuses\" = \"#324AB2\", \n                               \"rattle snakes\" = \"#708D81\")) +\n  labs(title = \"Humans Killed by Critter Type\",\n       x = \"Critter Type\", y = \"Average Humans Killed\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Improve readability of critter type labels\n\n\n\n\n\n\n\nFigure 2\n\n\nCode\n# Summarize data to get total or average humans.killed by critter type\nsummary_data &lt;- deadly.critters %&gt;%\n  group_by(critter.type) %&gt;%\n  summarise(total_killed = sum(humans.killed)) %&gt;%\n  mutate(percentage = total_killed / sum(total_killed)) %&gt;%\n  arrange(desc(percentage))\n\n# Create a factor with levels ordered by the percentage to use in the fill aesthetic\nsummary_data$critter.type &lt;- factor(summary_data$critter.type, levels = summary_data$critter.type)\n\n# Manually create a gradient based on the percentage for each critter type\ngradient_colors &lt;- colorRampPalette(c(\"#93A5A6\", \"#708D81\"))(n = nrow(summary_data))\n\n# Creating a pie chart\nggplot(summary_data, aes(x = \"\", y = percentage, fill = critter.type)) +\n  geom_bar(width = 1, stat = \"identity\", color = \"white\") + \n  coord_polar(\"y\", start = 0) +\n  scale_fill_manual(values = setNames(gradient_colors, summary_data$critter.type)) +\n  labs(title = \"Interpretation Challenge: Humans Killed by Critters\",\n       x = NULL, y = NULL, fill = \"Critter Type\") +\n  theme_void() +\n  theme(legend.title = element_blank())\n\n\n\n\n\nThis visualization is much less effective than the previous figure. Assessing the most important attribute is obscured by using a pie chart and color coding critter types using similar colors. Additionally the pie chart makes it difficult to discern if any difference in exists between rattle snakes and hippopotamuses."
  },
  {
    "objectID": "posts/MarksChannels/index.html#discriminability",
    "href": "posts/MarksChannels/index.html#discriminability",
    "title": "Assignment 4",
    "section": "Discriminability",
    "text": "Discriminability\n\nFigure 3\n\n\nCode\nage_groups &lt;- c('10-15', '15-20', '20-25', '25-30', '30-35')\nworry_scores &lt;- c(2, 8, 9, 7, 4) # Example scores based on the described trend\n\n# Create a data frame\nnonsense.data &lt;- data.frame(\n  Age_Group = factor(age_groups, levels = age_groups),\n  Mean_Worry_Score = worry_scores\n)\n\n# Display the dataset\nprint(nonsense.data)\n\n\n  Age_Group Mean_Worry_Score\n1     10-15                2\n2     15-20                8\n3     20-25                9\n4     25-30                7\n5     30-35                4\n\n\n\n\nCode\n# Create the bar chart\nggplot(nonsense.data, aes(x = Age_Group, y = Mean_Worry_Score, fill = \"glaucous green\")) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"#6082B6\") + # Fill bars with glaucous green\n  labs(title = \"Worrying About Stupid Nonsense as a Function of Age\", x = \"Age Group\", y = \"Mean Worry Score\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") # Hide the legend\n\n\n\n\n\nChunking age into five year bins makes it easy to discriminate between particular segments of one’s life and spot trends in worrying about stupid nonsense scores.\n\n\nFigure 4\n\n\nCode\n# Define the age range in three-month segments as fractions of a year\nages &lt;- seq(10, 35, by = 0.25)\n\n# Initialize worry scores according to the described trend\nworry_scores &lt;- numeric(length(ages))\nworry_scores[ages &lt;= 15] &lt;- 2 # Very low scores for ages 10-15\nworry_scores[ages &gt; 15 & ages &lt;= 20] &lt;- seq(3, 9, length.out = length(worry_scores[ages &gt; 15 & ages &lt;= 20])) # Increase from 15-20\nworry_scores[ages &gt; 20 & ages &lt;= 25] &lt;- 9 # High scores 20-25\nworry_scores[ages &gt; 25 & ages &lt;= 30] &lt;- seq(9, 7, length.out = length(worry_scores[ages &gt; 25 & ages &lt;= 30])) # Decline 25-30\nworry_scores[ages &gt; 30 & ages &lt;= 35] &lt;- seq(7, 4, length.out = length(worry_scores[ages &gt; 30 & ages &lt;= 35])) # Further decline 30-35\n\n# Create the dataset\ndataset_three_month &lt;- data.frame(\n  Age = ages,\n  Worry_Score = worry_scores\n)\n\n\n\n\nCode\n# Plot\nggplot(dataset_three_month, aes(x = as.factor(Age), y = Worry_Score)) +\n  geom_bar(stat = \"identity\", fill = \"#6082B6\") + # Glaucous green bars\n  labs(title = \"Cruddy Barchart About Worrying Too Much\",\n       x = \"Age (Years in Three-Month Segments)\",\n       y = \"Worry Score\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) + # Rotate x-axis labels for readability\n  theme(legend.position = \"none\") # Hide the legend\n\n\n\n\n\nBinning the data into three month segments still depicts the general trend of the data, but it’s cluttered and the x-axis looks terrible."
  },
  {
    "objectID": "posts/MarksChannels/index.html#separability",
    "href": "posts/MarksChannels/index.html#separability",
    "title": "Assignment 4",
    "section": "Separability",
    "text": "Separability\n\nFigure 5\n\n\nCode\n# Create the imaginary dataset\ncereal.data &lt;- data.frame(\n  age = factor(c(\"5 years old\", \"50 years old\")),\n  cereal.consumption = c(8, 3) # Assuming mean scores for demonstration\n)\n\n\n\n\nCode\ncolors &lt;- c(\"5 years old\" = \"#8E3A59\",  # Spinel red\n            \"50 years old\" = \"#93C572\")  # Pistachio green\n\n# Plot\nggplot(cereal.data, aes(x = age, y = cereal.consumption, fill = age)) +\n  geom_bar(stat = \"identity\", color = \"black\", show.legend = FALSE) +\n  scale_fill_manual(values = colors) +\n  labs(title = \"Cereal Consumption as a Function of Age\",\n       x = \"Age\",\n       y = \"Cereal Consumption Score\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Improve readability\n\n\n\n\n\nThis barchart uses position to convey differences in cereal consumption across the levels for the independent variable age. The two levels of age are differentiated by the fill color of the bars, which is entirely separable from position as a channel.\n\n\nFigure 6\n\n\nCode\n# Adjusting the example dataset for more overlap, same as before\nset.seed(42) # For reproducibility\ndata &lt;- data.frame(\n  Age_Level = factor(rep(c(\"5 years old\", \"50 years old\"), each = 50)),\n  Score = c(rnorm(50, mean = 8, sd = 2), rnorm(50, mean = 5, sd = 2)), # More overlap\n  X_Position = rep(1:50, times = 2)\n)\n\n# Venice green color\nvenice_green &lt;- \"#055C59\"\n\n# Creating the plot with the specified updates\nggplot(data, aes(x = X_Position, y = Score, group = Age_Level)) +\n  geom_segment(data = subset(data, Age_Level == \"5 years old\"), \n               aes(xend = X_Position, yend = Score - 0.2, color = Age_Level), \n               size = 1.2, linetype = \"solid\") + # Slightly larger lines for visibility\n  geom_segment(data = subset(data, Age_Level == \"50 years old\"), \n               aes(xend = X_Position + 0.3, yend = Score - 0.2, color = Age_Level), \n               size = 1.2, linetype = \"solid\") + # Slightly offset to simulate \"bent\"\n  scale_color_manual(name = \"Age Level\",\n                     values = c(\"5 years old\" = venice_green, \"50 years old\" = venice_green),\n                     labels = c(\"5 years old (vertical rectangle)\", \"50 years old (slightly tilted rectangle)\")) +\n  theme_minimal() +\n  labs(title = \"Cereal Consumption as a Function of Age - Cruddy Separability V1\", x = \"Data Point Index\", y = \"Score\") +\n  theme(legend.position = \"right\")\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nCode\n# Note: Both age levels use the venice green color but the legend explains the line types\n\n\n\n\nCode\nset.seed(42) # For reproducibility\ncereal.data.V2 &lt;- data.frame(\n  Age_Level = factor(rep(c(\"5 years old\", \"50 years old\"), each = 50)),\n  Score = c(rnorm(50, mean = 8, sd = 2), rnorm(50, mean = 5, sd = 2)), # More overlap\n  X_Position = c(rnorm(50, mean = 8, sd = 2), rnorm(50, mean = 8, sd = 2)),\n    Y_Position = c(rnorm(50, mean = 8, sd = 2), rnorm(50, mean = 8, sd = 2))\n)\n\n\n\n\nCode\n# Create the scatterplot\nggplot(cereal.data.V2, aes(x = X_Position, y = Y_Position)) +\n  geom_point(aes(shape = Age_Level, color = Score, alpha = Score), size = 3) +\n  #scale_shape_manual(values = c(\"5 years old\" = 17, \"50 years old\" = 15)) + # Assign shapes\n  #scale_color_gradient(low = \"blue\", high = \"red\") + # Assign color gradient for Score\n  labs(title = \"Cereal Consumption as a Function of Age - Cruddy Separability V2\",\n       x = \"X Position\", y = \"Y Position\",\n       color = \"Score\", shape = \"Age Level\") +\n  theme_minimal()\n\n\n\n\n\n\n\nFigure 7\n\n\nCode\nset.seed(42)  # Ensure reproducibility\n\n# Sample sizes\nn &lt;- 50\n\n# Generating data for the categorical independent variable 'critters'\ncritters &lt;- factor(rep(c(\"gophers\", \"bunny-rabbits\", \"weasels\"), each = n))\n\n# Generating data for the binary dependent variable 'bubonic plague'\n# with 'gophers' having a much higher infection rate\nbubonic_plague &lt;- c(\n  rbinom(n, 1, prob = 0.8),  # High infection rate for 'gophers'\n  rbinom(n, 1, prob = 0.2),  # Lower infection rate for 'bunny-rabbits'\n  rbinom(n, 1, prob = 0.15)  # Even lower infection rate for 'weasels'\n)\n\n# Creating the data frame and naming it 'bubonic.data'\nbubonic.data &lt;- data.frame(critters, bubonic_plague)\n\n# Viewing the first few rows of 'bubonic.data'\nhead(bubonic.data)\n\n\n  critters bubonic_plague\n1  gophers              0\n2  gophers              0\n3  gophers              1\n4  gophers              0\n5  gophers              1\n6  gophers              1\n\n\n\n\nCode\n# Calculating the infection rate for each critter type\ninfection_rates &lt;- bubonic.data %&gt;%\n  group_by(critters) %&gt;%\n  summarise(Infection_Rate = mean(bubonic_plague)) # since bubonic_plague is 0 for not infected and 1 for infected\n\n# Viewing the infection rates\nprint(infection_rates)\n\n\n# A tibble: 3 × 2\n  critters      Infection_Rate\n  &lt;fct&gt;                  &lt;dbl&gt;\n1 bunny-rabbits           0.1 \n2 gophers                 0.64\n3 weasels                 0.16\n\n\n\n\nCode\nggplot(bubonic.data, aes(x = critters, y = bubonic_plague, fill = critters)) +\n  stat_summary(fun.y = \"mean\", geom = \"bar\", position = \"dodge\", aes(alpha = critters)) +\n  scale_fill_manual(values = c(\"gophers\" = \"#6C3461\", \"weasels\" = \"#708D81\", \"bunny-rabbits\" = \"#93A5A6\")) +\n  scale_alpha_manual(values = c(\"gophers\" = 1, \"weasels\" = 0.9, \"bunny-rabbits\" = 0.9)) +\n  labs(title = \"Bubonic Plague Infection Rates by Critter Type\",\n       x = \"Critter Type\", y = \"Infection Rate\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5)) +\n  guides(fill = guide_legend(title = \"Critter Type\"), alpha = FALSE)  # Remove alpha legend\n\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n\n\n\n\n\nThis figure uses the channel position on a common scale, enhanced by a sharp color contrast between the critter type with the highest infection rate and the other two types of critters, to create POP-OUT.\n\n\nFigure 8\n\n\nCode\n# Calculate the proportion or rate of infection for each critter\ninfection_rates &lt;- bubonic.data %&gt;%\n  group_by(critters) %&gt;%\n  summarise(Infected_Rate = mean(bubonic_plague), .groups = 'drop')  # Calculate infection rate\n\n# Creating the bar chart with a slightly less distorted scale\nggplot(infection_rates, aes(x = critters, y = Infected_Rate, fill = critters)) +\n  geom_bar(stat = \"identity\", position = position_dodge(), show.legend = FALSE) +\n  scale_fill_manual(values = c(\"weasels\" = \"#93A5A6\", \"bunny-rabbits\" = \"#93A5A6\", \"gophers\" = \"#93A5A6\")) +\n  labs(title = \"Minimized Pop-Out Across Critters\",\n       x = \"Critter Type\", y = \"Infection Rate\") +\n  ylim(0, 10) +  # Adjust the scale to be less distorted\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve readability of x labels\n\n\n\n\n\nThis bar chart reduces pop-out by distorting the scale of the y-axis and making the color of the bars uniform."
  },
  {
    "objectID": "posts/Hockey-Data/Hockey-Data-Backbone.html",
    "href": "posts/Hockey-Data/Hockey-Data-Backbone.html",
    "title": "ASSIGNMENT 05",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\n\n\n\nCode\nhockey.data &lt;- read.csv(\"~/Desktop/NHLdraftstats.csv\")\n\n\n\n\nCode\nhockey.data$round &lt;- factor(hockey.data$round, \n                        levels = sort(unique(hockey.data$round)), \n                        ordered = TRUE)\n\n\n\n\nCode\nhead(hockey.data)\n\n\n\nSimple Scatterplot\n\n\nCode\nggplot(draft2022, aes(x = round, y = NHLgames, size = Count)) +\n  geom_point(col = \"#4A7D81\", alpha = 0.6) +\n  scale_size_continuous(range = c(3, 10)) +\n  scale_y_continuous(limits = c(0, max(draft2022$NHLgames) * 1.1)) +\n  theme_minimal() +\n  labs(title = \"Number of NHL Games Played as a Function of Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games Played\",\n       size = \"Number of Players\",\n       caption = \"Figure 1. Relationship between which round players were drafted\\nand the number of games they played in. Key: Draft Round.\\nValue: NHL Games Played. Marks: dots. Channels: position and size of dots.\") +\n  theme(legend.position = \"bottom\",\n        plot.caption = element_text(hjust = 0))\n\n\n\n\nExpanded Scatterplot\n\n\nCode\ndraft.2018&lt;-hockey.data%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\ndraft.tot.2018&lt;- draft.2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n\n\nCode\nggplot(draft.tot.2018, aes(x = round, y = totgames, size = count)) +\n  geom_jitter(alpha = 0.6, color = \"#4A7D81\", width = 0.2, height = 0) +  # Add jitter to the dots\n  scale_size_area(name = \"Number of Players\", max_size = 15, breaks = c(1, 5, 10, 20), labels = c(\"1\", \"5\", \"10\", \"20\")) +\n  theme_minimal() +\n  labs(title = \"Total Number of NHL Games Played as a Function of Draft Round\",\n       x = \"Draft Round\",\n       y = \"Total NHL Games Played\",\n       caption = \"Figure 1. Relationship between which round players were drafted\\nand the total number of games they played in. Key: Draft Round.\\nValue: Total NHL Games Played. Marks: dots. Channels: position \\nand size of dots.\") +\n  theme(legend.position = \"bottom\",\n        plot.caption = element_text(hjust = 0))\n\n\n\n\nSCATTERPLOT WITH OVERALL DRAFT POSITION\nMidnight Blue: #191970\n\n\nCode\nhockey.total &lt;- hockey.data%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n\n\nCode\nggplot(hockey.total, aes(x=overall, y=totgames))+\n  geom_point()\n\n\n\n\nCode\nhockey.total$overall_color &lt;- factor(ifelse(hockey.total$overall == 1, \"#191970\",\n                                      ifelse(hockey.total$overall == 2, \"#5B92E5\",\n                                      ifelse(hockey.total$overall == 3, \"#95C8D8\",\n                                             \"#C4C3D0\"))))\n\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\")\n\n\n\n\nCode\nhockey.total$size &lt;- ifelse(hockey.total$overall %in% c(1, 2, 3), 2.5, 1.5)  # Increase size for 1, 2, 3\n\n# Update the ggplot code to reflect the new size adjustments\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(aes(size = I(size)), alpha = 0.6) +  # Use I(size) to apply the size directly\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1)),\n         size = FALSE) +  # Hide the size legend\n  theme(legend.position = \"right\")\n\n\n\n\nCode\nhockey.total$size &lt;- ifelse(hockey.total$overall %in% c(1, 2, 3), 2.5, 1)  # Increase size for 1, 2, 3; decrease for others\n\n# Update the ggplot code to include the adjusted size aesthetic\n# and limit the x-axis to show only overall scores less than 12\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color, size = I(size))) +\n  geom_point(alpha = 0.6) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1)),\n         size = FALSE) +  # Hide the size legend since it's manually set\n  theme(legend.position = \"right\") +\n  coord_cartesian(xlim = c(NA, 11)) # Limit the x-axis to overall scores less than 12\n\n\n\n\nCode\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +  # Jitter dots with specified size\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\") +\n  coord_cartesian(xlim = c(NA, 6)) # Limit the x-axis to show only overall scores less than 7\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 2.5) +  # Fixed size for all dots\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\")\n\n# Second plot (with jitter)\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +  # Jittered dots\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) # Limit x-axis\n\ncombined_plot &lt;- (plot1 | plot2) + \n  plot_annotation(title = \"Total NHL Games Played by Draft Pick\", \n                  theme = theme(plot.title = element_text(hjust = 0.5))) +\n  plot_layout(guides = 'collect')\n\n# Move the shared legend to the bottom\ncombined_plot &lt;- combined_plot & theme(legend.position = \"bottom\")\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 2.5) +  # Specific size for all dots\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")  # Hide legend here, will be shown on combined plot\n\n# Second plot with jittered dots and specific sizes as per your updated requirements\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +  # Use jitter with specified size\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +  # Limit x-axis as per your requirement\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")  # Hide legend here as well\n\n# Combine the plots side by side with a shared title and a single legend at the bottom\ncombined_plot &lt;- plot1 + plot2 + \n  plot_layout(guides = 'collect') +\n  plot_annotation(title = \"Total NHL Games Played by Draft Pick\", theme = theme(plot.title = element_text(hjust = 0.5)))\n\n# Adjust the legend position to the bottom for the combined plot\ncombined_plot &lt;- combined_plot & theme(legend.position = \"bottom\")\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\n# Define the first plot\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\")\n\n# Define the second plot\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +  # Jitter dots with specified size\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\") +\n  coord_cartesian(xlim = c(NA, 6)) # Limit the x-axis to show only overall scores less than 7\n\n# Combine the plots side-by-side without altering titles or legends\ncombined_plot &lt;- plot1 + plot2\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.5) +  # Reduced specific size for all dots to 1.5\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")  # Hide legend here, will be shown on combined plot\n\n# Second plot remains unchanged\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +  # Use jitter with specified size\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +  # Limit x-axis as per your requirement\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")  # Hide legend here as well\n\n# Combine the plots side by side with a shared title and a single legend at the bottom\ncombined_plot &lt;- plot1 + plot2 + \n  plot_layout(guides = 'collect') +\n  plot_annotation(title = \"Total NHL Games Played as a Function Draft Pick\", theme = theme(plot.title = element_text(hjust = 0.5)))\n\n# Adjust the legend position to the bottom for the combined plot\ncombined_plot &lt;- combined_plot & theme(legend.position = \"bottom\")\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.5) +  # Adjusted size for smaller dots\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\", \n        axis.title.x = element_text(size = 10),  # Smaller font size for x-axis label\n        axis.title.y = element_text(size = 10))  # Smaller font size for y-axis label\n\n# Define the second plot without the y-axis label and with jittered dots\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Overall Draft Pick\", y = NULL) +  # Removed y-axis label\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\", \n        axis.title.x = element_text(size = 10))  # Smaller font size for x-axis label, y-axis label is not shown\n\n# Combine the plots side by side with a shared title and a single legend at the bottom\ncombined_plot &lt;- plot1 + plot2 + \n  plot_layout(guides = 'collect') +\n  plot_annotation(title = \"Total NHL Games Played as a Function Draft Pick\", \n                  theme = theme(plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")))\n\n# Adjust the legend position to the bottom for the combined plot\ncombined_plot &lt;- combined_plot & theme(legend.position = \"bottom\")\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.2) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"Draft Pick 1\", \"Draft Pick 2\", \"Draft Pick 3\", \"Draft Pick &gt; 3\"),\n                     breaks = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Draft Pick Value\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")\n\n# Define the second plot with customized legend labels and without the y-axis label\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"Draft Pick 1\", \"Draft Pick 2\", \"Draft Pick 3\", \"Draft Pick &gt; 3\"),\n                     breaks = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Overall Draft Pick\", y = NULL) +\n  guides(color = guide_legend(title = \"Draft Pick Value\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")\n\n# Combine the plots side by side with the legend placed at the bottom\ncombined_plot &lt;- plot1 + plot2 + \n  plot_layout(guides = 'collect') +\n  plot_annotation(title = \"Total NHL Games Played as a Function Draft Pick\", \n                  theme = theme(plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\", margin = margin(b = 10))))\n\n# Adjust the legend position to the bottom for the combined plot\ncombined_plot &lt;- combined_plot & theme(legend.position = \"bottom\")\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.5) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  theme(legend.position = \"none\")\n\n# Define plot2 with a legend and specify the size of the dots in the legend.\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"Draft Pick 1\", \"Draft Pick 2\", \"Draft Pick 3\", \"Draft Pick &gt; 3\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Overall Draft Pick\", y = NULL) +\n  guides(color = guide_legend(title = \"Overall Draft Pick\",\n                              override.aes = list(size = 2.5)))  # Set the size of dots in the legend\n\n# Combine the plots side by side, ensuring only plot2's legend is used.\ncombined_plot &lt;- plot1 + plot2\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.2) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"Draft Pick 1\", \"Draft Pick 2\", \"Draft Pick 3\", \"Draft Pick &gt; 3\"),\n                     breaks = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") #+\n  #guides(color = guide_legend(title = \"Draft Pick Value\", override.aes = list(alpha = 1))) +\n  #theme(legend.position = \"none\")\n\n# Define the second plot with customized legend labels and without the y-axis label\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"Draft Pick 1\", \"Draft Pick 2\", \"Draft Pick 3\", \"Draft Pick &gt; 3\"),\n                     breaks = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Overall Draft Pick\", y = NULL) +\n  guides(color = guide_legend(title = \"Draft Pick Value\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"none\")\n\n# Combine the plots side by side with the legend placed at the bottom\ncombined_plot &lt;- plot1 + plot2 + \n  plot_layout(guides = 'collect') +\n  plot_annotation(title = \"Total NHL Games Played as a Function Draft Pick\", \n                  theme = theme(plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\", margin = margin(b = 10))))\n\n# Adjust the legend position to the bottom for the combined plot\ncombined_plot &lt;- combined_plot & theme(legend.position = \"bottom\")\n\n# Display the combined plot\ncombined_plot\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.2) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Overall Draft Pick\", y = \"Total NHL Games Played\") +\n  theme(legend.position = \"none\")\n\n# Define plot2 with a legend and specify the size of the dots in the legend\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"Draft Pick 1\", \"Draft Pick 2\", \"Draft Pick 3\", \"Draft Pick &gt; 3\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Overall Draft Pick\", y = NULL) +\n  guides(color = guide_legend(title = \"Overall Draft Pick\",\n                              override.aes = list(size = 2.5)))  # Set the size of dots in the legend\n\n# Combine the plots side by side, ensuring only plot2's legend is used\ncombined_plot &lt;- plot1 + plot2\n\n# Add a single title for the whole figure and make the font bold\ncombined_plot + plot_annotation(title = \"Total NHL Games Played as a Function of Draft Pick\", \n                                theme = theme(plot.title = element_text(face = \"bold\")))\n\n\n\n\nCode\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.1) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Draft Round\", y = \"Total NHL Games Played\") +\n  theme(legend.position = \"none\")\n\n# Define plot2 with a legend and specify the size of the dots in the legend\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"R1\", \"R2\", \"R3\", \"R &gt; 3\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Draft Round\", y = NULL) +\n  guides(color = guide_legend(title = \"Draft Round:\",\n                              override.aes = list(size = 2.5)))  # Set the size of dots in the legend\n\n# Combine the plots side by side, ensuring only plot2's legend is used\ncombined_plot &lt;- plot1 + plot2\n\n# Add a single title for the whole figure and make the font bold\n# And, shrink the size of the legend\ncombined_plot_final = combined_plot + \n  plot_annotation(title = \"Total NHL Games Played as a Function of Draft Round\", \n                  theme = theme(plot.title = element_text(face = \"bold\"))) +\n  theme(legend.position = \"bottom\",\n        legend.text = element_text(size = 8), # Smaller text in the legend\n        legend.title = element_text(size = 9), # Smaller title in the legend\n        legend.key.size = unit(0.5, \"cm\")) # Smaller keys in the legend\n\n# Display the combined plot with the adjusted legend\ncombined_plot_final"
  },
  {
    "objectID": "Reference-BCB520-A5.html",
    "href": "Reference-BCB520-A5.html",
    "title": "Reference-BCB520-A5",
    "section": "",
    "text": "ggplot(draft2022, aes(x = round, y = NHLgames, size = Count)) +\n  geom_point(col = \"#4A7D81\", alpha = 0.6) +\n  scale_size_continuous(range = c(3, 10)) +\n  scale_y_continuous(limits = c(0, max(draft2022$NHLgames) * 1.1)) +\n  theme_minimal() +\n  labs(title = \"Number of NHL Games Played as a Function of Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games Played\",\n       size = \"Number of Players\",\n       caption = \"Figure 1. Relationship between which round players were drafted\\nand the number of games they played in. Key: Draft Round.\\nValue: NHL Games Played. Marks: dots. Channels: position and size of dots.\") +\n  theme(legend.position = \"bottom\",\n        plot.caption = element_text(hjust = 0))"
  },
  {
    "objectID": "Reference-BCB520-A5.html#reference-figures-and-code",
    "href": "Reference-BCB520-A5.html#reference-figures-and-code",
    "title": "Reference-BCB520-A5",
    "section": "Reference Figures and Code",
    "text": "Reference Figures and Code\n\nhockey.total$overall_color &lt;- factor(ifelse(hockey.total$overall == 1, \"#191970\",\n                                      ifelse(hockey.total$overall == 2, \"#5B92E5\",\n                                      ifelse(hockey.total$overall == 3, \"#95C8D8\",\n                                             \"#C4C3D0\"))))\n\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\")\n\n\nhockey.total$size &lt;- ifelse(hockey.total$overall %in% c(1, 2, 3), 2.5, 1)  # Increase size for 1, 2, 3; decrease for others\n\n# Update the ggplot code to include the adjusted size aesthetic\n# and limit the x-axis to show only overall scores less than 12\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color, size = I(size))) +\n  geom_point(alpha = 0.6) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1)),\n         size = FALSE) +  # Hide the size legend since it's manually set\n  theme(legend.position = \"right\") +\n  coord_cartesian(xlim = c(NA, 11)) # Limit the x-axis to overall scores less than 12\n\n\nggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +  # Jitter dots with specified size\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(title = \"Total NHL Games Played by Draft Pick\",\n       x = \"Overall Draft Pick\",\n       y = \"Total NHL Games Played\") +\n  guides(color = guide_legend(title = \"Overall Score Color\", override.aes = list(alpha = 1))) +\n  theme(legend.position = \"right\") +\n  coord_cartesian(xlim = c(NA, 6)) # Limit the x-axis to show only overall scores less than 7\n\n\nplot1 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_point(alpha = 0.6, size = 1.2) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\")) +\n  theme_minimal() +\n  labs(x = \"Draft Round\", y = \"Total NHL Games\") +\n  theme(legend.position = \"none\")\n\n# Define plot2 with a legend and specify the size of the dots in the legend\nplot2 &lt;- ggplot(hockey.total, aes(x = overall, y = totgames, color = overall_color)) +\n  geom_jitter(alpha = 0.6, size = 2.5, width = 0.2, height = 0) +\n  scale_color_manual(values = c(\"#191970\", \"#5B92E5\", \"#95C8D8\", \"#C4C3D0\"),\n                     labels = c(\"R1\", \"R2\", \"R3\", \"R &gt; 3\")) +\n  theme_minimal() +\n  coord_cartesian(xlim = c(NA, 6)) +\n  labs(x = \"Draft Round\", y = NULL) +\n  guides(color = guide_legend(title = \"Draft Round:\",\n                              override.aes = list(size = 2.5)))  # Set the size of dots in the legend\n\n# Combine the plots side by side, ensuring only plot2's legend is used\ncombined_plot &lt;- plot1 + plot2\n\n# Add a single title for the whole figure and make the font bold\n# And, shrink the size of the legend\ncombined_plot_final = combined_plot + \n  plot_annotation(title = \"Total NHL Games Played as a Function of Draft Round\", \n                  theme = theme(plot.title = element_text(face = \"bold\"))) +\n  theme(legend.position = \"bottom\",\n        legend.text = element_text(size = 8), # Smaller text in the legend\n        legend.title = element_text(size = 9), # Smaller title in the legend\n        legend.key.size = unit(0.5, \"cm\")) # Smaller keys in the legend\n\n# Display the combined plot with the adjusted legend\ncombined_plot_final"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Konrad Bailey is a graduate student at the University of Idaho studying geographic information science and statistics.\n\nEducation\nUniversity of Oregon | BS in Psychology with departmental honors, 2017-2020\n\n\nMy GitHub…\nInsert link here"
  }
]